#
# General options
#

# Specify the marker used in comments to disable processing of part of the
# file.
#
# Default:  *INDENT-OFF*
disable_processing_cmt                  = "*fmt-off*"

# Specify the marker used in comments to (re)enable processing in a file.
#
# Default:  *INDENT-ON*
enable_processing_cmt                   = "*fmt-on*"

# The original size of tabs in the input.
#
# Default: 8
input_tab_size                          = 4

# The size of tabs in the output (only used if align_with_tabs=true).
#
# Default: 8
output_tab_size                         = 4

#
# Spacing options
#

# Add or remove space around non-assignment symbolic operators ('+', '/', '%',
# '<<', and so forth).
sp_arith                                = force

# Add or remove space around assignment operator '=', '+=', etc.
sp_assign                               = force

# Add or remove space around assignment '=' in enum.
sp_enum_assign                          = force

# Add or remove space around preprocessor '##' concatenation operator.
#
# Default: add
sp_pp_concat                            = remove

# Add or remove space after preprocessor '#' stringify operator.
# Also affects the '#@' charizing operator.
sp_pp_stringify                         = remove

# Add or remove space around boolean operators '&&' and '||'.
sp_bool                                 = force

# Add or remove space around compare operator '<', '>', '==', etc.
sp_compare                              = force

# Add or remove space inside '(' and ')'.
sp_inside_paren                         = remove

# Add or remove space between nested parentheses, i.e. '((' vs. ') )'.
sp_paren_paren                          = remove

# Add or remove space between back-to-back parentheses, i.e. ')(' vs. ') ('.
sp_cparen_oparen                        = remove

# Whether to balance spaces inside nested parentheses.
sp_balance_nested_parens                = false

# Add or remove space between ')' and '{'.
sp_paren_brace                          = remove

# Add or remove space between nested braces, i.e. '{{' vs. '{ {'.
sp_brace_brace                          = remove

# Add or remove space before pointer star '*'.
sp_before_ptr_star                      = force

# Add or remove space before pointer star '*' that isn't followed by a
# variable name. If set to ignore, sp_before_ptr_star is used instead.
sp_before_unnamed_ptr_star              = force

# Add or remove space between pointer stars '*', as in 'int ***a;'.
sp_between_ptr_star                     = remove

# Add or remove space after pointer star '*', if followed by a word.
#
# Overrides sp_type_func.
sp_after_ptr_star                       = remove

# Add or remove space after pointer star '*', if followed by a qualifier.
sp_after_ptr_star_qualifier             = remove

# Add or remove space after a pointer star '*', if followed by a function
# prototype or function definition.
#
# Overrides sp_after_ptr_star and sp_type_func.
sp_after_ptr_star_func                  = force

# Add or remove space after a pointer star '*' in the trailing return of a
# function prototype or function definition.
sp_after_ptr_star_trailing              = remove

# Add or remove space after a pointer star '*', if followed by an open
# parenthesis, as in 'void* (*)()'.
sp_ptr_star_paren                       = force

# Add or remove space before a pointer star '*', if followed by a function
# prototype or function definition.
sp_before_ptr_star_func                 = remove

# Add or remove space before a reference sign '&'.
sp_before_byref                         = remove

# Add or remove space after reference sign '&', if followed by a word.
#
# Overrides sp_type_func.
sp_after_byref                          = force

# Add or remove space after a reference sign '&', if followed by a function
# prototype or function definition.
#
# Overrides sp_after_byref and sp_type_func.
sp_after_byref_func                     = force

# Add or remove space before a reference sign '&', if followed by a function
# prototype or function definition.
sp_before_byref_func                    = remove

# Add or remove space between type and word. In cases where total removal of
# whitespace would be a syntax error, a value of 'remove' is treated the same
# as 'force'.
#
# This also affects some other instances of space following a type that are
# not covered by other options; for example, between the return type and
# parenthesis of a function type template argument, between the type and
# parenthesis of an array parameter, or between 'decltype(...)' and the
# following word.
#
# Default: force
sp_after_type                           = force

# Add or remove space before '<'.
sp_before_angle                         = remove

# Add or remove space inside '<' and '>'.
sp_inside_angle                         = remove

# Add or remove space inside '<>'.
sp_inside_angle_empty                   = remove

# Add or remove space between '>' and ':'.
sp_angle_colon                          = remove

# Add or remove space after '>'.
sp_after_angle                          = remove

# Add or remove space between '>' and '(' as found in 'new List<byte>(foo);'.
sp_angle_paren                          = remove

# Add or remove space between '>' and a word as in 'List<byte> m;' or
# 'template <typename T> static ...'.
sp_angle_word                           = remove

# Add or remove space between '>' and '>' in '>>' (template stuff).
#
# Default: add
sp_angle_shift                          = remove

# Add or remove space before '(' of control statements ('if', 'for', 'switch',
# 'while', etc.).
sp_before_sparen                        = force

# Add or remove space inside '(' and ')' of control statements other than
# 'for'.
sp_inside_sparen                        = remove

# Add or remove space after '(' of control statements other than 'for'.
#
# Overrides sp_inside_sparen.
sp_inside_sparen_open                   = remove

# Add or remove space before ')' of control statements other than 'for'.
#
# Overrides sp_inside_sparen.
sp_inside_sparen_close                  = remove

# Add or remove space inside '(' and ')' of 'for' statements.
sp_inside_for                           = remove

# Add or remove space after '(' of 'for' statements.
#
# Overrides sp_inside_for.
sp_inside_for_open                      = remove

# Add or remove space before ')' of 'for' statements.
#
# Overrides sp_inside_for.
sp_inside_for_close                     = remove

# Add or remove space between '((' or '))' of control statements.
sp_sparen_paren                         = remove

# Add or remove space after ')' of control statements.
sp_after_sparen                         = remove

# Add or remove space between ')' and '{' of control statements.
sp_sparen_brace                         = force

# Add or remove space between 'do' and '{'.
sp_do_brace_open                        = force

# Add or remove space between '}' and 'while'.
sp_brace_close_while                    = force

# Add or remove space before empty statement ';' on 'if', 'for' and 'while'.
sp_special_semi                         = remove

# Add or remove space before ';'.
#
# Default: remove
sp_before_semi                          = remove

# Add or remove space before ';' in non-empty 'for' statements.
sp_before_semi_for                      = remove

# Add or remove space before a semicolon of an empty left part of a for
# statement, as in 'for ( <here> ; ; )'.
sp_before_semi_for_empty                = remove

# Add or remove space between the semicolons of an empty middle part of a for
# statement, as in 'for ( ; <here> ; )'.
sp_between_semi_for_empty               = remove

# Add or remove space after ';', except when followed by a comment.
#
# Default: add
sp_after_semi                           = remove

# Add or remove space after ';' in non-empty 'for' statements.
#
# Default: force
sp_after_semi_for                       = force

# Add or remove space after the final semicolon of an empty part of a for
# statement, as in 'for ( ; ; <here> )'.
sp_after_semi_for_empty                 = remove

# Add or remove space before '[' (except '[]').
sp_before_square                        = remove

# Add or remove space before '[]'.
sp_before_squares                       = remove

# Add or remove space inside a non-empty '[' and ']'.
sp_inside_square                        = remove

# Add or remove space inside '[]'.
sp_inside_square_empty                  = remove

# Add or remove space after ',', i.e. 'a,b' vs. 'a, b'.
sp_after_comma                          = force

# Add or remove space before ',', i.e. 'a,b' vs. 'a ,b'.
#
# Default: remove
sp_before_comma                         = remove

# Add or remove space after C/D cast, i.e. 'cast(int)a' vs. 'cast(int) a' or
# '(int)a' vs. '(int) a'.
sp_after_cast                           = remove

# Add or remove spaces inside cast parentheses.
sp_inside_paren_cast                    = remove

# Add or remove space between 'sizeof' and '('.
sp_sizeof_paren                         = remove

# Add or remove space inside enum '{' and '}'.
sp_inside_braces_enum                   = remove

# Add or remove space inside struct/union '{' and '}'.
sp_inside_braces_struct                 = remove

# Add or remove space inside '{' and '}'.
sp_inside_braces                        = remove

# Add or remove space between return type and function name. A minimum of 1
# is forced except for pointer return types.
sp_type_func                            = force

# Add or remove space between type and open brace of an unnamed temporary
# direct-list-initialization.
sp_type_brace_init_lst                  = force

# Add or remove space between function name and '(' on function declaration.
sp_func_proto_paren                     = remove

# Add or remove space between function name and '()' on function declaration
# without parameters.
sp_func_proto_paren_empty               = remove

# Add or remove space between alias name and '(' of a non-pointer function type
# typedef.
sp_func_def_paren                       = remove

# Add or remove space between function name and '()' on function definition
# without parameters.
sp_func_def_paren_empty                 = remove

# Add or remove space inside empty function '()'.
# Overrides sp_after_angle unless use_sp_after_angle_always is set to true.
sp_inside_fparens                       = remove

# Add or remove space inside function '(' and ')'.
sp_inside_fparen                        = remove

# Add or remove space inside the first parentheses in a function type, as in
# 'void (*x)(...)'.
sp_inside_tparen                        = remove

# Add or remove space between the ')' and '(' in a function type, as in
# 'void (*x)(...)'.
sp_after_tparen_close                   = remove

# Add or remove space between ']' and '(' when part of a function call.
sp_square_fparen                        = remove

# Add or remove space between ')' and '{' of function.
sp_fparen_brace                         = force

# Add or remove space between function name and '(' on function calls.
sp_func_call_paren                      = remove

# Add or remove space between nested parentheses with user functions,
# i.e. '((' vs. '( ('.
sp_func_call_user_paren_paren           = remove

# Add or remove space between 'return' and '('.
sp_return_paren                         = force

# Add or remove space between '__attribute__' and '('.
sp_attribute_paren                      = remove

# Add or remove space between 'defined' and '(' in '#if defined (FOO)'.
sp_defined_paren                        = remove

# Add or remove space between a macro name and its definition.
sp_macro                                = force

# Add or remove space between a macro function ')' and its definition.
sp_macro_func                           = force

sp_else_brace                           = force

# Add or remove space between 'else' and '{' if on the same line.
sp_brace_else                           = force

# Add or remove space between '}' and the name of a typedef on the same line.
sp_brace_typedef                        = force

# Add or remove space between a variable and '{' for a namespace.
#
# Default: add
sp_word_brace_ns                        = force

# Add or remove space before a backslash-newline at the end of a line.
#
# Default: add
sp_before_nl_cont                       = force

# Add or remove space around the ':' in 'b ? t : f'.
sp_cond_colon                           = force

# Add or remove space around the '?' in 'b ? t : f'.
sp_cond_question                        = force

# Fix the spacing between 'case' and the label. Only 'ignore' and 'force' make
# sense here.
sp_case_label                           = force

# Add or remove space after the opening of a C++ comment, as in '// <here> A'.
sp_cmt_cpp_start                        = force

# Add or remove space between #else or #endif and a trailing comment.
sp_endif_cmt                            = force

# Add or remove space between function name and '(' with a typedef specifier.
sp_func_type_paren                      = remove

# Add or remove space before the variadic '...' when preceded by a
# non-punctuator.
# The value REMOVE will be overriden with FORCE
sp_before_ellipsis                      = remove

# Add or remove space before a trailing comment.
sp_before_tr_cmt                        = force

# Add or remove space before a reference sign '&' that isn't followed by a
# variable name. If set to ignore, sp_before_byref is used instead.
sp_before_unnamed_byref                 = remove

# Add or remove space after class ':'.
sp_after_class_colon                    = force

# Add or remove space before class ':'.
sp_before_class_colon                   = force

# Add or remove space before case ':'.
#
# Default: remove
sp_before_case_colon                    = remove

# Add or remove space between 'operator' and operator sign.
sp_after_operator                       = remove

# Add or remove space between the operator symbol and the open parenthesis, as
# in 'operator ++('.
sp_after_operator_sym                   = remove

# Add or remove space between the type and open parenthesis in a C++ cast,
# i.e. 'int(exp)' vs. 'int (exp)'.
sp_cpp_cast_paren                       = remove

# Add or remove space inside '{}'.
sp_inside_braces_empty                  = remove

# Add or remove space inside function '(' and ')'.
sp_inside_fparen                        = remove

# Add or remove space between the user function name and '(' on function
# calls. You need to set a keyword to be a user function in the config file,
# like:
#   set func_call_user tr _ i18n
sp_func_call_user_paren                 = remove

# Add or remove space between a constructor/destructor and the open
# parenthesis.
sp_func_class_paren                     = remove

# Add or remove space between 'throw' and '(' in 'throw (something)'.
sp_throw_paren                          = force

# Add or remove space before the '{' of a 'catch' statement, if the '{' and
# 'catch' are on the same line, as in 'catch (decl) <here> {'.
sp_catch_brace                          = force

# Add or remove space between '}' and 'catch' if on the same line.
sp_brace_catch                          = force

# Add or remove space between 'finally' and '{' if on the same line.
sp_finally_brace                        = force

# Add or remove space between '}' and 'finally' if on the same line.
sp_brace_finally                        = force

# Add or remove space between 'try' and '{' if on the same line.
sp_try_brace                            = force

# Add or remove space between get/set and '{' if on the same line.
sp_getset_brace                         = force

# Add or remove space before the '::' operator.
sp_before_dc                            = remove

# Add or remove space after the '::' operator.
sp_after_dc                             = remove

# Add or remove space after the '!' (not) unary operator.
#
# Default: remove
sp_not                                  = remove

# Add or remove space after the '~' (invert) unary operator.
#
# Default: remove
sp_inv                                  = remove

# Add or remove space after the '&' (address-of) unary operator. This does not
# affect the spacing after a '&' that is part of a type.
#
# Default: remove
sp_addr                                 = remove

# Add or remove space around the '.' or '->' operators.
#
# Default: remove
sp_member                               = remove

# Add or remove space after the '*' (dereference) unary operator. This does
# not affect the spacing after a '*' that is part of a type.
#
# Default: remove
sp_deref                                = remove

# Add or remove space after '+' or '-', as in 'x = -5' or 'y = +7'.
#
# Default: remove
sp_sign                                 = remove

# Add or remove space between '++' and '--' the word to which it is being
# applied, as in '(--x)' or 'y++;'.
#
# Default: remove
sp_incdec                               = remove

# (OC) Add or remove space after the scope '+' or '-', as in '-(void) foo;'
# or '+(int) bar;'.
sp_after_oc_scope                       = remove

# (OC) Add or remove space after the colon in message specs,
# i.e. '-(int) f:(int) x;' vs. '-(int) f: (int) x;'.
sp_after_oc_colon                       = remove

# (OC) Add or remove space before the colon in message specs,
# i.e. '-(int) f: (int) x;' vs. '-(int) f : (int) x;'.
sp_before_oc_colon                      = remove

# (OC) Add or remove space after the colon in message specs,
# i.e. '[object setValue:1];' vs. '[object setValue: 1];'.
sp_after_send_oc_colon                  = force

# (OC) Add or remove space before the colon in message specs,
# i.e. '[object setValue:1];' vs. '[object setValue :1];'.
sp_before_send_oc_colon                 = remove

# (OC) Add or remove space after the (type) in message specs,
# i.e. '-(int)f: (int) x;' vs. '-(int)f: (int)x;'.
sp_after_oc_type                        = remove

# Number of spaces before a trailing comment.
sp_num_before_tr_cmt                    = 2

# Add or remove indentation of preprocessor directives inside #if blocks
# at brace level 0 (file-level).
pp_indent                               = remove

# Whether to indent case statements between #if, #else, and #endif.
# Only applies to the indent of the preprocesser that the case statements
# directly inside of.
#
# Default: true
pp_indent_case                          = false

# Whether to indent whole function definitions between #if, #else, and #endif.
# Only applies to the indent of the preprocesser that the function definition
# is directly inside of.
#
# Default: true
pp_indent_func_def                      = false

# Whether to indent extern C blocks between #if, #else, and #endif.
# Only applies to the indent of the preprocesser that the extern block is
# directly inside of.
#
# Default: true
pp_indent_extern                        = false

# Whether to indent braces directly inside #if, #else, and #endif.
# Only applies to the indent of the preprocesser that the braces are directly
# inside of.
#
# Default: true
pp_indent_brace                         = false

# Whether to indent #if/#else/#endif at the brace level. If false, these are
# indented from column 1.
pp_indent_at_level                      = false

# Whether to indent the code between #region and #endregion.
pp_region_indent_code                   = false

# Whether to indent the code between #if, #else and #endif.
pp_if_indent_code                       = false

# Whether to indent '#define' at the brace level. If false, these are
# indented from column 1.
pp_define_at_level                      = false

# Add or remove space after # based on pp_level of #if blocks.
pp_space                                = remove

#
# Indenting options
#

# The number of columns to indent per level. Usually 2, 3, 4, or 8.
#
# Default: 8
indent_columns                          = 4

# How to use tabs when indenting code.
#
# 0: Spaces only
# 1: Indent with tabs to brace level, align with spaces (default)
# 2: Indent and align with tabs, using spaces when not on a tabstop
#
# Default: 1
indent_with_tabs                        = 0

# Whether to indent strings broken by '\' so that they line up.
indent_align_string                     = true

# The number of spaces to indent a continued '->' or '.'.
# Usually set to 0, 1, or indent_columns.
indent_member                           = 4

# Spaces to indent '{' from 'case'. By default, the brace will appear under
# the 'c' in case. Usually set to 0 or indent_columns. Negative values are OK.
# It might be wise to choose the same value for the option indent_switch_case.
indent_case_brace                       = 4

# Whether to align continued statements at the '('. If false or the '(' is
# followed by a newline, the next line indent is one tab.
#
# Default: true
indent_align_paren                      = true

# Whether braces are indented to the body level.
indent_braces                           = false

# Whether to disable indenting function braces if indent_braces=true.
indent_braces_no_func                   = false

# Whether to indent based on the size of the brace parent,
# i.e. 'if' => 3 spaces, 'for' => 4 spaces, etc.
indent_brace_parent                     = false

# Whether to indent the body of a 'namespace'.
indent_namespace                        = false

# Whether the 'extern "C"' body is indented.
indent_extern                           = false

# Whether the 'class' body is indented.
indent_class                            = true

# Whether to indent the stuff after a leading base class colon.
indent_class_colon                      = true

# Whether to indent 'if' following 'else' as a new block under the 'else'.
# If false, 'else\nif' is treated as 'else if' for indenting purposes.
indent_else_if                          = true

# Whether to indent continued function call parameters one indent level,
# rather than aligning parameters under the open parenthesis.
indent_func_call_param                  = false

# Whether to indent continued function definition parameters one indent level,
# rather than aligning parameters under the open parenthesis.
indent_func_def_param                   = false

# Whether to indent continued function call prototype one indent level,
# rather than aligning parameters under the open parenthesis.
indent_func_proto_param                 = false

# Whether to indent continued function call declaration one indent level,
# rather than aligning parameters under the open parenthesis.
indent_func_class_param                 = false

# Whether to indent continued class variable constructors one indent level,
# rather than aligning parameters under the open parenthesis.
indent_func_ctor_var_param              = false

# Whether to indent continued template parameter list one indent level,
# rather than aligning parameters under the open parenthesis.
indent_template_param                   = false

# Double the indent for indent_func_xxx_param options.
# Use both values of the options indent_columns and indent_param.
indent_func_param_double                = false

# Whether to indent trailing single line ('//') comments relative to the code
# instead of trying to keep the same absolute column.
indent_relative_single_line_comments    = false

# Whether to indent comments found in first column.
indent_col1_comment                     = true

# Whether to indent the code after an access specifier by one level.
# If true, this option forces 'indent_access_spec=0'.
indent_access_spec_body                 = false

# If an open parenthesis is followed by a newline, whether to indent the next
# line so that it lines up after the open parenthesis (not recommended).
indent_paren_nl                         = false

# Whether to indent a comma when inside a parenthesis.
# If true, aligns under the open parenthesis.
# Requires indent_ignore_comma_paren=false.
indent_comma_paren                      = false

# Whether to indent a Boolean operator when inside a parenthesis.
# If true, aligns under the open parenthesis.
# Requires indent_ignore_bool_paren=false.
indent_bool_paren                       = false

# If an open square is followed by a newline, whether to indent the next line
# so that it lines up after the open square (not recommended).
indent_square_nl                        = false

# (ESQL/C) Whether to preserve the relative indent of 'EXEC SQL' bodies.
indent_preserve_sql                     = false

# Whether to align continued statements at the '='. If false or if the '=' is
# followed by a newline, the next line is indent one tab.
#
# Default: true
indent_align_assign                     = true

#
# Newline adding and removing options
#

# Whether to collapse empty blocks between '{' and '}'.
# If true, overrides nl_inside_empty_func
nl_collapse_empty_body                  = true

# Don't split one-line braced assignments, as in 'foo_t f = { 1, 2 };'.
nl_assign_leave_one_liners              = true

# Add or remove newlines at the start of the file.
nl_start_of_file                        = remove

# Add or remove newline at the end of the file.
nl_end_of_file                          = force

# The minimum number of newlines at the end of the file (only used if
# nl_end_of_file is 'add' or 'force').
nl_end_of_file_min                      = 1

# Add or remove newline between '=' and '{'.
nl_assign_brace                         = force

# Add or remove newline between a function call's ')' and '{', as in
# 'list_for_each(item, &list) { }'.
nl_fcall_brace                          = force

# Add or remove newline between 'enum' and '{'.
nl_enum_brace                           = force

# Add or remove newline between 'struct and '{'.
nl_struct_brace                         = force

# Add or remove newline between 'union' and '{'.
nl_union_brace                          = force

# Add or remove newline between 'if' and '{'.
nl_if_brace                             = force

# Add or remove newline between '}' and 'else'.
nl_brace_else                           = force

# Add or remove newline between 'else' and '{'.
nl_else_brace                           = force

# Add or remove newline before 'if'/'else if' closing parenthesis.
nl_before_if_closing_paren              = remove

# Add or remove newline between 'for' and '{'.
nl_for_brace                            = force

# Add or remove newline between 'while' and '{'.
nl_while_brace                          = force

# Add or remove newline between 'do' and '{'.
nl_do_brace                             = force

# Add or remove newline between '}' and 'while' of 'do' statement.
nl_brace_while                          = remove

# Add or remove newline between 'switch' and '{'.
nl_switch_brace                         = force

# Force a newline in a define after the macro name for multi-line defines.
nl_multi_line_define                    = true

# Whether to add a newline before 'case', and a blank line before a 'case'
# statement that follows a ';' or '}'.
nl_before_case                          = false

# Whether to add a newline after a 'case' statement.
nl_after_case                           = false

# Add or remove newline between a case ':' and '{'.
#
# Overrides nl_after_case.
nl_case_colon_brace                     = true

# Add or remove newline between a function name and the opening '(' in the
# declaration.
nl_func_paren                           = remove

# Add or remove newline between a function name and the opening '(' in the
# definition.
nl_func_def_paren                       = remove

# Add or remove newline between a function name and the opening '(' in the
# call.
nl_func_call_paren                      = remove

# Add or remove newline after '(' in a function declaration.
nl_func_decl_start                      = remove

# Add or remove newline after '(' in a function definition.
nl_func_def_start                       = remove

# Add or remove newline after each ',' in a function declaration.
nl_func_decl_args                       = force

# Add or remove newline after each ',' in a function definition.
nl_func_def_args                        = force

# Add or remove newline after each ',' in a function call.
nl_func_call_args                       = force

# Add or remove newline before the ')' in a function declaration.
nl_func_decl_end                        = remove

# Add or remove newline before the ')' in a function definition.
nl_func_def_end                         = remove

# Add or remove newline between '()' in a function declaration.
nl_func_decl_empty                      = remove

# Add or remove newline between '()' in a function definition.
nl_func_def_empty                       = remove

# Add or remove newline between '()' in a function call.
nl_func_call_empty                      = remove

# Whether to add a newline before ')' in a function call.
nl_func_call_end                        = remove

# Add or remove newline between function signature and '{'.
nl_fdef_brace                           = force

# Add or remove newline between 'return' and the return expression.
nl_return_expr                          = remove

# Whether to add a newline after semicolons, except in 'for' statements.
nl_after_semicolon                      = true

# Whether to add a newline after '{'.
nl_after_brace_open                     = true

# Whether to add a newline after '}'. Does not apply if followed by a
# necessary ';'.
nl_after_brace_close                    = true

# Add or remove newline between the close brace and identifier,
# as in 'struct { int a; } <here> b;'. Affects enumerations, unions and
# structures. If set to ignore, uses nl_after_brace_close.
nl_brace_struct_var                     = remove

# Whether to alter newlines in '#define' macros.
nl_define_macro                         = true

# Whether to remove blanks after '#ifxx' and '#elxx', or before '#elxx' and
# '#endif'. Does not affect top-level #ifdefs.
nl_squeeze_ifdef                        = true

# Add or remove blank line before 'if'.
nl_before_if                            = force

# Add or remove blank line after 'if' statement. Add/Force work only if the
# next token is not a closing brace.
nl_after_if                             = force

# Add or remove blank line before 'for'.
nl_before_for                           = force

# Add or remove blank line after 'for' statement.
nl_after_for                            = force

# Add or remove blank line before 'while'.
nl_before_while                         = force

# Add or remove blank line after 'while' statement.
nl_after_while                          = force

# Add or remove blank line before 'switch'.
nl_before_switch                        = force

# Add or remove blank line after 'switch' statement.
nl_after_switch                         = force

# Add or remove blank line before 'do'.
nl_before_do                            = force

# Add or remove blank line after 'do/while' statement.
nl_after_do                             = force

# Whether to put a blank line before 'return' statements, unless after an open
# brace.
nl_before_return                        = true

# Whether to put a blank line after 'return' statements, unless followed by a
# close brace.
nl_after_return                         = true

# The maximum number of consecutive newlines (3 = 2 blank lines).
nl_max                                  = 2

# The number of newlines after a function prototype, if not followed by
# another function prototype.
nl_after_func_proto_group               = 2

# The number of newlines after '}' of a multi-line function body.
nl_after_func_body                      = 2

# The number of newlines after '}' of a multi-line function body in a class
# declaration. Also affects class constructors/destructors.
#
# Overrides nl_after_func_body.
nl_after_func_body_class                = 2

# The number of blank lines after a block of variable definitions at the top
# of a function body.
#
# 0: No change (default).
nl_func_var_def_blk                     = 1

# The minimum number of newlines before a multi-line comment.
# Doesn't apply if after a brace open or another multi-line comment.
nl_before_block_comment                 = 2

# The number of newlines between a function definition and the function
# comment, as in '// comment\n <here> void foo() {...}'.
#
# 0: No change (default).
nl_comment_func_def                     = 1

# Add a newline between ')' and '{' if the ')' is on a different line than the
# if/for/etc.
#
# Overrides nl_for_brace, nl_if_brace, nl_switch_brace, nl_while_switch and
# nl_catch_brace.
nl_multi_line_cond                      = true

# Whether to collapse empty blocks between '{' and '}'.
# If true, overrides nl_inside_empty_func
nl_collapse_empty_body                  = true

# Don't split one-line braced statements inside a 'class xx { }' body.
nl_class_leave_one_liners               = false

# Don't split one-line enums, as in 'enum foo { BAR = 15 };'
nl_enum_leave_one_liners                = false

# Don't split one-line get or set functions.
nl_getset_leave_one_liners              = false

# Don't split one-line function definitions, as in 'int foo() { return 0; }'.
# might modify nl_func_type_name
nl_func_leave_one_liners                = false

# Don't split one-line if/else statements, as in 'if(...) b++;'.
nl_if_leave_one_liners                  = false

# Whether to add a newline between the open brace and a trailing single-line
# comment. Requires nl_after_brace_open=true.
nl_after_brace_open_cmt                 = false

# Whether to add a newline after a virtual brace open with a non-empty body.
# These occur in un-braced if/while/do/for statement bodies.
nl_after_vbrace_open                    = false

# Whether to double-space commented-entries in 'struct'/'union'/'enum'.
nl_ds_struct_enum_cmt                   = true

# Whether to force a newline before '}' of a 'struct'/'union'/'enum'.
# (Lower priority than eat_blanks_before_close_brace.)
nl_ds_struct_enum_close_brace           = true

# Whether to remove a newline in simple unbraced if statements, turning them
# into one-liners, as in 'if(b)\n i++;' => 'if(b) i++;'.
nl_create_if_one_liner                  = false

# Whether to remove a newline in simple unbraced for statements, turning them
# into one-liners, as in 'for (...)\n stmt;' => 'for (...) stmt;'.
nl_create_for_one_liner                 = false

# Whether to remove a newline in simple unbraced while statements, turning
# them into one-liners, as in 'while (expr)\n stmt;' => 'while (expr) stmt;'.
nl_create_while_one_liner               = false

# Whether to force a newline after a multi-line comment.
nl_after_multiline_comment              = true

# The number of newlines after a function prototype.
nl_after_func_proto                     = 0

# The number of newlines after '}' of a single line function body. Also
# affects class constructors/destructors.
#
# Overrides nl_after_func_body and nl_after_func_body_class.
nl_after_func_body_one_liner            = 2

# The minimum number of newlines before a single-line C comment.
# Doesn't apply if after a brace open or other single-line C comments.
nl_before_c_comment                     = 2

# The minimum number of newlines before a CPP comment.
# Doesn't apply if after a brace open or other CPP comments.
nl_before_cpp_comment                   = 2

# The number of newlines before an access specifier label. This also includes
# the Qt-specific 'signals:' and 'slots:'. Will not change the newline count
# if after a brace open.
#
# 0: No change (default).
nl_before_access_spec                   = 2

# The number of newlines after an access specifier label. This also includes
# the Qt-specific 'signals:' and 'slots:'. Will not change the newline count
# if after a brace open.
#
# 0: No change (default).
#
# Overrides nl_typedef_blk_start and nl_var_def_blk_start.
nl_after_access_spec                    = 2

# The number of newlines after a try-catch-finally block that isn't followed
# by a brace close.
#
# 0: No change (default).
nl_after_try_catch_finally              = 1

# Add or remove newline between 'namespace' and '{'.
nl_namespace_brace                      = remove

# Add or remove newline between 'class' and '{'.
nl_class_brace                          = remove

# Add or remove newline before or after (depending on pos_class_comma,
# may not be IGNORE) each',' in the base class list.
nl_class_init_args                      = force

# Whether to remove blank lines after '{'.
eat_blanks_after_open_brace             = true

# Whether to remove blank lines before '}'.
eat_blanks_before_close_brace           = true

# The position of arithmetic operators in wrapped expressions.
pos_arith                               = trail

# The position of assignment in wrapped expressions. Do not affect '='
# followed by '{'.
pos_assign                              = join

# The position of Boolean operators in wrapped expressions.
pos_bool                                = join

# The position of comparison operators in wrapped expressions.
pos_compare                             = join

# The position of conditional operators, as in the '?' and ':' of
# 'expr ? stmt : stmt', in wrapped expressions.
pos_conditional                         = join

# The position of the comma in wrapped expressions.
pos_comma                               = trail

# The position of the comma in enum entries.
pos_enum_comma                          = trail_force

# The position of shift operators in wrapped expressions.
pos_shift                               = join

#
# Line splitting options
#

# Try to limit code width to N columns.
code_width                              = 120

# Whether to split lines as close to code_width as possible and ignore some
# groupings.
# The option ls_code_width has priority over the option ls_func_split_full.
ls_code_width                           = true

# Whether to fully split long 'for' statements at semi-colons.
ls_for_split_full                       = true

# Whether to fully split long function prototypes/calls at commas.
# The option ls_code_width has priority over the option ls_func_split_full.
ls_func_split_full                      = true

#
# Code alignment options (not left column spaces/tabs)
#

# Whether to right-align numbers.
align_number_right                      = true

# Whether to align variable definitions in prototypes and functions.
align_func_params                       = true

# The span for aligning parameter definitions in function on parameter name.
#
# 0: Don't align (default).
align_func_params_span                  = 2

# The threshold for aligning function parameter definitions.
# Use a negative number for absolute thresholds.
#
# 0: No limit (default).
align_func_params_thresh                = 0

# The gap for aligning function parameter definitions.
align_func_params_gap                   = 1

# The span for aligning variable definitions.
#
# 0: Don't align (default).
align_var_def_span                      = 1

# How to consider (or treat) the '*' in the alignment of variable definitions.
#
# 0: Part of the type     'void *   foo;' (default)
# 1: Part of the variable 'void     *foo;'
# 2: Dangling             'void    *foo;'
# Dangling: the '*' will not be taken into account when aligning.
align_var_def_star_style                = 2

# The threshold for aligning variable definitions.
# Use a negative number for absolute thresholds.
#
# 0: No limit (default).
align_var_def_thresh                    = 0

# Whether to align the colon in struct bit fields.
align_var_def_colon                     = true

# Whether to align any attribute after the variable name.
align_var_def_attribute                 = true

# Whether to align inline struct/enum/union variable definitions.
align_var_def_inline                    = true

# The gap for aligning variable definitions.
align_var_def_gap                       = 1

# The span for aligning on '=' in assignments.
#
# 0: Don't align (default).
align_assign_span                       = 0

# The threshold for aligning on '=' in assignments.
# Use a negative number for absolute thresholds.
#
# 0: No limit (default).
align_assign_thresh                     = 0

# The span for aligning on '=' in enums.
#
# 0: Don't align (default).
align_enum_equ_span                     = 0

# The span for aligning struct/union member definitions.
#
# 0: Don't align (default).
align_var_struct_span                   = 1

# The span for aligning struct initializer values.
#
# 0: Don't align (default).
align_struct_init_span                  = 1

# How to consider (or treat) the '*' in the alignment of typedefs.
#
# 0: Part of the typedef type, 'typedef int * pint;' (default)
# 1: Part of type name:        'typedef int   *pint;'
# 2: Dangling:                 'typedef int  *pint;'
# Dangling: the '*' will not be taken into account when aligning.
align_typedef_star_style                = 2

# The minimum space between the type and the synonym of a typedef.
align_typedef_gap                       = 0

# How to align typedef'd functions with other typedefs.
#
# 0: Don't mix them at all (default)
# 1: Align the open parenthesis with the types
# 2: Align the function type name with the other type names
align_typedef_func                      = 0

# The span for aligning single-line typedefs.
#
# 0: Don't align (default).
align_typedef_span                      = 1

# The span for aligning comments that end lines.
#
# 0: Don't align (default).
align_right_cmt_span                    = 10

# Whether to only align trailing comments that are at the same brace level.
align_right_cmt_same_level              = true

# Whether to align macros wrapped with a backslash and a newline. This will
# not work right if the macro contains a multi-line comment.
align_nl_cont                           = true

# The span for aligning on '#define' bodies.
#
# =0: Don't align (default)
# >0: Number of lines (including comments) between blocks
align_pp_define_span                    = 10

# The minimum space between label and value of a preprocessor define.
align_pp_define_gap                     = 4

# Whether to align text after 'asm volatile ()' colons.
align_asm_colon                         = true

# Whether to keep non-indenting tabs.
align_keep_tabs                         = false

# Whether to use tabs for aligning.
align_with_tabs                         = false

# Whether to bump out to the next tab when aligning.
align_on_tabstop                        = false

# Whether to align parameters in single-line functions that have the same
# name. The function names must already be aligned with each other.
align_same_func_call_params             = true

# Whether to align any attribute after the variable name.
align_var_def_attribute                 = true

# If aligning comments, whether to mix with comments after '}' and #endif with
# less than three spaces before the comment.
align_right_cmt_mix                     = false

# Whether to align function prototypes on the 'operator' keyword instead of
# what follows.
align_on_operator                       = true

# Whether to mix aligning prototype and variable declarations. If true,
# align_var_def_XXX options are used instead of align_func_proto_XXX options.
align_mix_var_proto                     = false

# Whether to align single-line functions with function prototypes.
# Uses align_func_proto_span.
align_single_line_func                  = true

# Whether to align the open brace of single-line functions.
# Requires align_single_line_func=true. Uses align_func_proto_span.
align_single_line_brace                 = true

# Whether to align lines that start with '<<' with previous '<<'.
#
# Default: true
align_left_shift                        = true

# How to consider (or treat) the '&' in the alignment of variable definitions.
#
# 0: Part of the type     'long &   foo;' (default)
# 1: Part of the variable 'long     &foo;'
# 2: Dangling             'long    &foo;'
# Dangling: the '&' will not be taken into account when aligning.
align_var_def_amp_style                 = 2

# How to consider (or treat) the '&' in the alignment of typedefs.
#
# 0: Part of the typedef type, 'typedef int & intref;' (default)
# 1: Part of type name:        'typedef int   &intref;'
# 2: Dangling:                 'typedef int  &intref;'
# Dangling: the '&' will not be taken into account when aligning.
align_typedef_amp_style                 = 2

# Minimum column at which to align trailing comments. Comments which are
# aligned beyond this column, but which can be aligned in a lesser column,
# may be "pulled in".
#
# 0: Ignore (default).
align_right_cmt_at_col                  = 1

# The span for aligning function prototypes.
#
# 0: Don't align (default).
align_func_proto_span                   = 3

#
# Comment modification options
#

# Whether to put a star on subsequent comment lines.
cmt_star_cont                           = false

# Whether to convert all tabs to spaces in comments. If false, tabs in
# comments are left alone, unless used for indenting.
cmt_convert_tab_to_spaces               = true

# Whether to apply changes to multi-line comments, including cmt_width,
# keyword substitution and leading chars.
#
# Default: true
cmt_indent_multi                        = true

# Whether to group c-comments that look like they are in a block.
cmt_c_group                             = false

# Whether to put an empty '/*' on the first line of the combined c-comment.
cmt_c_nl_start                          = false

# Whether to add a newline before the closing '*/' of the combined c-comment.
cmt_c_nl_end                            = false

# Whether to group cpp-comments that look like they are in a block. Only
# meaningful if cmt_cpp_to_c=true.
cmt_cpp_group                           = false

# Whether to put an empty '/*' on the first line of the combined cpp-comment
# when converting to a c-comment.
#
# Requires cmt_cpp_to_c=true and cmt_cpp_group=true.
cmt_cpp_nl_start                        = false

# Whether to add a newline before the closing '*/' of the combined cpp-comment
# when converting to a c-comment.
#
# Requires cmt_cpp_to_c=true and cmt_cpp_group=true.
cmt_cpp_nl_end                          = false

# Whether to change cpp-comments into c-comments.
cmt_cpp_to_c                            = false

# For multi-line comments with a '*' lead, remove leading spaces if the first
# and last lines of the comment are the same length.
#
# Default: true
cmt_multi_check_last                    = true

# Whether a comment should be inserted if a preprocessor is encountered when
# stepping backwards from a function name.
#
# Applies to cmt_insert_oc_msg_header, cmt_insert_func_header and
# cmt_insert_class_header.
cmt_insert_before_preproc               = false

# Try to wrap comments at N columns.
cmt_width                               = 80

#
# Code modifying options (non-whitespace)
#

# Add or remove braces on a single-line 'do' statement.
mod_full_brace_do                       = force

# Add or remove braces on a single-line 'for' statement.
mod_full_brace_for                      = force

# Add or remove braces on a single-line 'if' statement. Braces will not be
# removed if the braced statement contains an 'else'.
mod_full_brace_if                       = force

# Add or remove braces on single-line 'while' statement.
mod_full_brace_while                    = force

# Whether to fully parenthesize Boolean expressions in 'while' and 'if'
# statement, as in 'if (a && b > c)' => 'if (a && (b > c))'.
mod_full_paren_if_bool                  = true

# Whether to remove superfluous semicolons.
mod_remove_extra_semicolon              = true

# Add or remove braces around a fully braced case statement. Will only remove
# braces if there are no variable declarations in the block.
mod_case_brace                          = remove

# Whether to remove a void 'return;' that appears as the last statement in a
# function.
mod_remove_empty_return                 = true

# Add or remove unnecessary parenthesis on 'return' statement.
mod_paren_on_return                     = remove

# Add or remove the comma after the last value of an enumeration.
mod_enum_last_comma                     = force

# (Pawn) Whether to change optional semicolons to real semicolons.
mod_pawn_semicolon                      = false

# Whether to sort consecutive single-line 'import' statements.
mod_sort_import                         = false

# (C#) Whether to sort consecutive single-line 'using' statements.
mod_sort_using                          = false

# Whether to sort consecutive single-line '#include' statements (C/C++) and
# '#import' statements (Objective-C). Be aware that this has the potential to
# break your code if your includes/imports have ordering dependencies.
mod_sort_include                        = false

# Whether to move a 'break' that appears after a fully braced 'case' before
# the close brace, as in 'case X: { ... } break;' => 'case X: { ... break; }'.
mod_move_case_break                     = true

# Don't remove braces around statements that span N newlines
mod_full_brace_nl                       = 1

# If an #ifdef body exceeds the specified number of newlines and doesn't have
# a comment after the #endif, a comment will be added.
mod_add_long_ifdef_endif_comment        = 1

# If an #ifdef or #else body exceeds the specified number of newlines and
# doesn't have a comment after the #else, a comment will be added.
mod_add_long_ifdef_else_comment         = 1

#
# Sort includes options
#

# Whether to apply special formatting for Qt SIGNAL/SLOT macros. Essentially,
# this tries to format these so that they match Qt's normalized form (i.e. the
# result of QMetaObject::normalizedSignature), which can slightly improve the
# performance of the QObject::connect call, rather than how they would
# otherwise be formatted.
#
# See options_for_QT.cpp for details.
#
# Default: true
use_options_overriding_for_qt_macros    = false

# Allow interpreting '>=' and '>>=' as part of a template in code like
# 'void f(list<list<B>>=val);'. If true, 'assert(x<0 && y>=3)' will be broken.
# Improvements to template detection may make this option obsolete.
tok_split_gte                           = false
